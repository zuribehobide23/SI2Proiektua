package eredua.domeinua;
import java.io.Serializable;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.*;

@Entity
@DiscriminatorValue("DRIVER") 
public class DriverHibernate extends User implements Serializable {

    private static final long serialVersionUID = 1L;

    @OneToMany(mappedBy = "driver", fetch = FetchType.LAZY, cascade = CascadeType.ALL)
    private List<Ride> createdRides = new ArrayList<>();

    public Driver() {
    }

    public Driver(String username, String passwd) {
        super(username, passwd, "Driver");
    }

    @Override
    public String toString() {
        return super.toString();
    }

    public List<Ride> getCreatedRides() {
        return createdRides;
    }

    public void setCreatedRides(List<Ride> createdRides) {
        this.createdRides = createdRides;
    }

    public Ride addRide(String from, String to, Date date, int nPlaces, float price) {
        Ride ride = new Ride(from, to, date, nPlaces, price, this); 
        createdRides.add(ride);
        return ride;
    }

    public boolean doesRideExists(String from, String to, Date date) {
        for (Ride r : createdRides) {
            if ((java.util.Objects.equals(r.getFrom(), from)) &&
                (java.util.Objects.equals(r.getTo(), to)) &&
                (java.util.Objects.equals(r.getDate(), date))) {
                return true;
            }
        }
        return false;
    }

    @Override
    public boolean equals(Object obj) {
        return super.equals(obj);
    }

    public Ride removeRide(String from, String to, Date date) {
        Ride rideToRemove = null;
        for (Ride ride : createdRides) {
            if ((java.util.Objects.equals(ride.getFrom(), from)) &&
                (java.util.Objects.equals(ride.getTo(), to)) &&
                (java.util.Objects.equals(ride.getDate(), date))) {
                rideToRemove = ride;
                break;
            }
        }
        if (rideToRemove != null) {
            createdRides.remove(rideToRemove);
        }
        return rideToRemove;
    }
}
